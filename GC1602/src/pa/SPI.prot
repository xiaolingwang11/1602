protocol SPI {
// Read  Template : spi_write_tmp
// Write Template : spi_read_tmp
//----------------------------------------
// mapping of state characters
    mapping = drv[state0 = "0", state1 = "1"], rcv[state0 = "L", state1 = "H", capture =
        "C", ignore = "X"];
        // SPI protocol pin definition:
    // ...........................:
    // .......  CLK:    EXTINT6
    // ..  DATA OUT:    NF_DATA_3
    // ...  DATA IN:    SCL1
    // ........  CS:    SDA1

    //      setup digInOut pSPI {
    //    result.capture.enabled = false;
    //    wavetable wvt_SPI {
    //      xModes = 1;
    //      0: d1:0;
    //      1: d1:1;
    //      L: d1:Z r1:L;
    //      H: d1:Z r1:H;
    //      X: d1:Z r1:X;
    //      Z: d1:Z;
    //      p: d1:0 d2:1;
    //      C: d1:Z r1:C;
    //      D: d1:Z r1:X;
    //    }
    //  }
    signalRole SPI_CLK {
        idleSequence = "0";
    }
    signalRole SPI_CS {
        idleSequence = "1";
    }
    signalRole SPI_DI {
        idleSequence = "0";
    }
    signalRole SPI_DO {
        idleSequence = "X";
    }

    transaction waitCycles ( UnsignedLong IN Cycles ) {

        define SPI_CLK {
            field drive idle;
            idle = repeat ( "0", Cycles );
        }

        define SPI_CS {
            field drive idle;
            idle = repeat ( "1", Cycles );
        }

        define SPI_DI {
            field drive idle;
            idle = repeat ( "0", Cycles );
        }

        define SPI_DO {
            field drive idle;
            idle = repeat ( "X", Cycles );
        }
    }

    transaction write ( UnsignedLong IN Address, UnsignedLong IN Data ) { // data type UnsignedLong


        define SPI_CLK {
            field drive idle;
            idle = repeat ( "0", 3 );

            field drive clk;
            clk = repeat ( "p", 32 );

            field drive clkDisable;
            clkDisable = "00";
        }

        define SPI_CS {
            field drive idle;
            idle = repeat ( "1", 3 );

            field drive leEnable;
            leEnable = repeat ( "0", 32 );

            field drive leDisable;
            leDisable = "11";
        }

        define SPI_DI {
            field drive start;
            start = repeat ( "0", 3 );

            field drive RW_Enable;
            RW_Enable = "0"; // "0" for write, "1" for read
            field drive writeAddress;
            writeAddress = Address[14..0]; // 15 address bits of data type UnsignedLong (of max 64 bits) with MSB (bit 14)...LSB (bit 0)
            field drive writeData;
            // writeData = Data[0 .. 15];  // 16 data bits of data type BitSequence (of any bit length) with MSB (bit 0)...LSB (bit 15)
            writeData = Data[15..0]; // 16 data bits of data type UnsignedLong (of max 64 bits) with MSB (bit 15)...LSB (bit 0)
            field drive end;
            end = "00";
        }

        define SPI_DO {
            field drive idle;
            idle = repeat ( "X", 37 );
        }
    }

    transaction read ( UnsignedLong IN Address, UnsignedLong OUT Data ) { // data type UnsignedLong


        define SPI_CLK {
            field drive idle;
            idle = repeat ( "0", 3 );

            field drive clk;
            clk = repeat ( "p", 32 );

            field drive clkDisable;
            clkDisable = repeat ( "0", 2 );
        }

        define SPI_CS {
            field drive idle;
            idle = repeat ( "1", 3 );

            field drive leEnable;
            leEnable = repeat ( "0", 32 );

            field drive leDisable;
            leDisable = repeat ( "1", 2 );
        }

        define SPI_DI {
            field drive start;
            start = repeat ( "1", 3 );

            field drive RW_Enable;
            RW_Enable = "1"; // "0" for write, "1" for read
            field drive writeAddress;
            // writeAddress = Address[1 .. 15]; // 15 address bits of data type BitSequence (of any bit length) with MSB (bit 1)...LSB (bit 15)
            writeAddress = Address[14..0]; // 15 address bits of data type UnsignedLong (of max 64 bits) with MSB (bit 14)...LSB (bit 0)
            field drive end;
            end = repeat ( "0", 18 );
        }

        define SPI_DO {
            field drive idle;
            idle = repeat ( "X", 19 );

            field receive readData;
            @Properties ( captureMode = isOut ( Data ) ) //used for capture, if compare please delete
            // readData = Data[0 .. 15];  // 16 data bits of data type BitSequence (of any bit length) with MSB (bit 0)...LSB (bit 15)
            readData = Data[15..0];
            // only for compare,but must define though capture 16 data bits of data type
            // UnsignedLong (of max 64 bits) with MSB (bit 15)...LSB (bit 0) used for compare
            field drive end1;
            end1 = "X";

            field drive end;
            end = "X";
        }
        Data = SPI_DO.readData[0..15]; //only for capture

    }
}
